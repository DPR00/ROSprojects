#!/usr/bin/env python
#

from __future__ import print_function
import rospy
from sensor_msgs.msg import JointState
from markers import *
from functions import *

# Initialize the node
rospy.init_node("testKineControlPosition")
print('starting motion ... ')
# Publisher: publish to the joint_states topic
pub = rospy.Publisher('joint_states', JointState, queue_size=10)

# Files for the logs
fxcurrent = open("/home/diegopalma/Documents/ROSProjects/lab_ws/src/projectfr/tmp/xcurrent_diffk.txt", "w")                
fxdesired = open("/home/diegopalma/Documents/ROSProjects/lab_ws/src/projectfr/tmp/xdesired_diffk.txt", "w")
fq = open("/home/diegopalma/Documents/ROSProjects/lab_ws/src/projectfr/tmp/q_diffk.txt", "w")

# Markers for the current and desired positions
bmarker_current  = BallMarker(color['RED'])
bmarker_desired = BallMarker(color['GREEN'])

# Joint names
jnames = ['joint1', 'joint2', 'joint3',
          'joint4', 'joint5', 'joint6']

# Desired position
xd = np.array([-0.2, -0.15, 0.28])
# Initial configuration
q0  = np.array([0.0, 0, 0, 0, 0, 0])
J0 = np.linalg.pinv(jacobian(q0))
print("J de configuracion inicial")
print(J0) 
# Resulting initial position (end effector with respect to the base link)
T = fkine(q0)
x0 = T[0:3,3]

# Red marker shows the achieved position
bmarker_current.xyz(x0)
# Green marker shows the desired position
bmarker_desired.xyz(xd)

# Instance of the JointState message
jstate = JointState()
# Values of the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q0

# Frequency (in Hz) and control period 
freq = 200
dt = 1.0/freq
rate = rospy.Rate(freq)

# Initial joint configuration
q = copy(q0)
x = x0      # Valor inicial de x
# Main loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Kinematic control law for position (complete here)
    # -----------------------------
    e = x-xd  # Error
    k = 1   # ganancia cinematica
    de= -k*e  # Derivada temporal del error
    J_= np.linalg.pinv(jacobian(q))  # Pseudo-inversa del jacobiano
    q = q + dt*J_.dot(de)  # Integracion de Euler
    T = fkine(q)      # Transformacion homogenea 
    x = T[0:3,3]      # Posicion actual
    if (np.linalg.norm(e)<=0.001):
        break
    # -----------------------------

    
    # Log values                                                      
    fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
    fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
    fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+
             str(q[4])+" "+str(q[5])+"\n")
    
    # Publish the message
    jstate.position = q
    pub.publish(jstate)
    bmarker_desired.xyz(xd)
    bmarker_current.xyz(x)
    # Wait for the next iteration
    rate.sleep()
print(q)
print('ending motion ...')
fxcurrent.close()
fxdesired.close()
fq.close()
